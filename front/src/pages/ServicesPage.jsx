import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import TransactionModal from '../components/TransactionModal';
import ProfitChart from '../components/ProfitChart';
import { getTransactions } from '../services/financeService';
import '../styles/ServicesPage.css';

const ServicesPage = () => {
  const navigate = useNavigate();
  const [userData, setUserData] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalType, setModalType] = useState(null);
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [activeTab, setActiveTab] = useState('overview'); // 'overview' –∏–ª–∏ 'chart'

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = localStorage.getItem('user');
    if (user) {
      setUserData(JSON.parse(user));
    }
    loadTransactions();
  }, []);

  const loadTransactions = async () => {
    try {
      setLoading(true);
      const data = await getTransactions();
      console.log('Loaded transactions:', data); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
      setTransactions(data || []); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –º–∞—Å—Å–∏–≤
    } catch (err) {
      console.error('Error loading transactions:', err); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('kk-KZ', {
      style: 'currency',
      currency: 'KZT',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  };

  const handleAddIncome = () => {
    setModalType('income');
    setIsModalOpen(true);
  };

  const handleAddExpense = () => {
    setModalType('expense');
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setModalType(null);
  };

  const handleTransactionAdded = () => {
    loadTransactions();
  };

  const handleTabChange = (tab) => {
    setActiveTab(tab);
  };

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è –æ–±–∑–æ—Ä–∞
  const monthlyData = transactions.reduce((acc, transaction) => {
    const date = new Date(transaction.transaction_date);
    const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;
    const monthName = date.toLocaleString('kk-KZ', { year: 'numeric', month: 'long' });
    
    if (!acc[monthKey]) {
      acc[monthKey] = {
        name: monthName,
        income: 0,
        expenses: 0,
        net: 0
      };
    }

    const amount = Number(transaction.amount);
    if (amount > 0) {
      acc[monthKey].income += amount;
    } else {
      acc[monthKey].expenses += Math.abs(amount);
    }
    acc[monthKey].net += amount;

    return acc;
  }, {});

  const months = Object.values(monthlyData).sort((a, b) => {
    return new Date(b.name) - new Date(a.name);
  });

  if (loading) {
    return <div className="loading">–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...</div>;
  }

  console.log('Current tab:', activeTab); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
  console.log('Has transactions:', transactions.length); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

  return (
    <div className="services-container">
      <div className="services-header">
        <div className="header-icon">‚ö°</div>
        <h1>“ö–∞—Ä–∂—ã –µ—Å–µ–ø—Ç–µ—É—ñ—à</h1>
      </div>

      <div className="welcome-card">
        <span className="welcome-icon">‚ö°</span>
        <p>
          {userData ? (
            `“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑, ${userData.username}! –ë“±–ª —Å—ñ–∑–¥—ñ“£ “õ–∞—Ä–∂—ã–ª—ã“õ –µ—Å–µ–ø—Ç–µ—É—ñ—à—ñ“£—ñ–∑. –ú“±–Ω–¥–∞ —Å—ñ–∑ –∫—ñ—Ä—ñ—Å—Ç–µ—Ä—ñ“£—ñ–∑ –±–µ–Ω —à—ã“ì—ã—Å—Ç–∞—Ä—ã“£—ã–∑–¥—ã –±–∞“õ—ã–ª–∞–π –∞–ª–∞—Å—ã–∑.`
          ) : (
            '“ö–∞—Ä–∂—ã–ª—ã“õ –µ—Å–µ–ø—Ç–µ—É—ñ—à–∫–µ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! –ñ“Ø–π–µ–≥–µ –∫—ñ—Ä—ñ–ø, ”©–∑ “õ–∞—Ä–∂—ã“£—ã–∑–¥—ã –±–∞“õ—ã–ª–∞“£—ã–∑.'
          )}
        </p>
        {userData ? (
          <Link to="#" className="start-button">‚Üí –ë–∞—Å—Ç–∞—É</Link>
        ) : (
          <Link to="/login" className="start-button">‚Üí –ö—ñ—Ä—É</Link>
        )}
      </div>

      {error && <div className="error-message">{error}</div>}

      <div className="dashboard-section">
        <h2>–ë–∞—Å“õ–∞—Ä—É —Ç–∞“õ—Ç–∞—Å—ã</h2>
        
        <div className="quick-actions">
          <h3>–ñ—ã–ª–¥–∞–º ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä</h3>
          <div className="action-buttons">
            <button className="action-button" onClick={handleAddIncome}>‚Üí –ö—ñ—Ä—ñ—Å “õ–æ—Å—É</button>
            <button className="action-button" onClick={handleAddExpense}>‚Üí –®—ã“ì—ã—Å “õ–æ—Å—É</button>
          </div>
        </div>

        <div className="overview-section">
          <div className="overview-header">
            <button 
              className={`overview-tab ${activeTab === 'overview' ? 'active' : ''}`}
              onClick={() => handleTabChange('overview')}
            >
              üìä –®–æ–ª—É
            </button>
            <button 
              className={`overview-tab ${activeTab === 'chart' ? 'active' : ''}`}
              onClick={() => handleTabChange('chart')}
            >
              üìà –ü–∞–π–¥–∞ –≥—Ä–∞—Ñ–∏–≥—ñ
            </button>
          </div>

          {activeTab === 'overview' ? (
            <div className="months-grid">
              {months.map((month, index) => (
                <div key={index} className="month-card">
                  <div className="month-header">
                    <span className="month-icon">‚ö°</span>
                    <h4>{month.name}</h4>
                  </div>
                  <div className="month-details">
                    <div className="detail-row">
                      <span>–ñ–∞–ª–ø—ã –∫—ñ—Ä—ñ—Å</span>
                      <span className="amount">{formatCurrency(month.income)}</span>
                    </div>
                    <div className="detail-row">
                      <span>–ñ–∞–ª–ø—ã —à—ã“ì—ã—Å</span>
                      <span className="amount">{formatCurrency(month.expenses)}</span>
                    </div>
                    <div className="detail-row net-profit">
                      <span>–¢–∞–∑–∞ –ø–∞–π–¥–∞</span>
                      <span className="amount">{formatCurrency(month.net)}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="chart-view">
              <ProfitChart transactions={transactions} />
            </div>
          )}
        </div>
      </div>

      <TransactionModal 
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        type={modalType}
        onTransactionAdded={handleTransactionAdded}
      />
    </div>
  );
};

export default ServicesPage; 